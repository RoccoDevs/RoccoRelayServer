using System;
using System.Buffers;
using System.IO;
using System.Text.Json;
using Bedrock.Framework.Protocols;
using Rocco.RelayServer.Core.Helpers;
using Rocco.RelayServer.Core.Domain;
using Rocco.RelayServer.Core.Microsoft;

namespace Rocco.RelayServer.Core.Services
{
    /// <summary>
    ///     Class SixtyNineReader.
    ///     Implements the
    ///     <see
    ///         cref="SixtyNineMessage" />
    /// </summary>
    /// <seealso
    ///     cref="SixtyNineMessage" />
    /// <autogeneratedoc />
    public class SixtyNineReader : IMessageReader<SixtyNineMessage>
    {
        /// <summary>
        ///     Tries the parse message.
        /// </summary>
        /// <param name="input">The input.</param>
        /// <param name="consumed">The consumed.</param>
        /// <param name="examined">The examined.</param>
        /// <param name="message">The message.</param>
        /// <returns><c>true</c> if input was parsed successfully, <c>false</c> otherwise.</returns>
        /// <exception cref="InvalidDataException">
        ///     Expected '{SixtyNinePropertyNames.PayloadTypePropertyName}' to be of type
        ///     {JsonTokenType.String}.
        /// </exception>
        /// <exception cref="InvalidDataException">
        ///     Expected '{SixtyNineWriter.SourcePropertyName}' to be of type
        ///     {JsonTokenType.String}.
        /// </exception>
        /// <exception cref="InvalidDataException">
        ///     Expected '{SixtyNineWriter.DestinationPropertyName}' to be of type
        ///     {JsonTokenType.String}.
        /// </exception>
        /// <exception cref="InvalidDataException">
        ///     Expected '{SixtyNineWriter.PayloadPropertyName}' to be of type
        ///     {JsonTokenType.String}.
        /// </exception>
        /// <autogeneratedoc />
        public virtual bool TryParseMessage(in ReadOnlySequence<byte> input, ref SequencePosition consumed,
            ref SequencePosition examined, out SixtyNineMessage message)
        {
            var sequenceReader = new SequenceReader<byte>(input);
            if (!sequenceReader.TryReadBigEndian(out int length) || input.Length < length + 4)
            {
                message = default!;
                return false;
            }

            var completed = false;
            string payloadType = default!;
            string source = default!;
            string destination = default!;
            Memory<byte> payload = default!;

            var rawPayload = input.Slice(sequenceReader.Position, length);

            //This reader is taken from Microsoft.AspNetCore.Internal
            var reader = new Utf8JsonReader(rawPayload, true, default);
            reader.CheckRead();

            reader.EnsureObjectStart();

            do
            {
                switch (reader.TokenType)
                {
                    case JsonTokenType.PropertyName:
                        if (reader.ValueTextEquals(SixtyNinePropertyNames.PayloadTypePropertyNameBytes
                            .EncodedUtf8Bytes))
                        {
                            payloadType = reader.ReadAsString(SixtyNinePropertyNames.PayloadTypePropertyName)
                                          ?? throw new InvalidDataException(
                                              $"Expected '{SixtyNinePropertyNames.PayloadTypePropertyName}' to be of type {JsonTokenType.String}.");
                        }
                        else if (reader.ValueTextEquals(SixtyNineWriter.SourcePropertyNameBytes.EncodedUtf8Bytes)
                        )
                        {
                            source = reader.ReadAsString(SixtyNineWriter.SourcePropertyName)
                                     ?? throw new InvalidDataException(
                                         $"Expected '{SixtyNineWriter.SourcePropertyName}' to be of type {JsonTokenType.String}.");
                        }
                        else if (reader.ValueTextEquals(SixtyNineWriter.DestinationPropertyNameBytes
                            .EncodedUtf8Bytes))
                        {
                            destination = reader.ReadAsString(SixtyNineWriter.DestinationPropertyName)
                                          ?? throw new InvalidDataException(
                                              $"Expected '{SixtyNineWriter.DestinationPropertyName}' to be of type {JsonTokenType.String}.");
                        }
                        else if (reader.ValueTextEquals(
                            SixtyNineWriter.PayloadPropertyNameBytes.EncodedUtf8Bytes))
                        {
                            reader.Read();

                            if (reader.HasValueSequence)
                            {
                                payload = new byte[reader.ValueSequence.Length];
                                reader.ValueSequence.CopyTo(payload.Span);
                            }
                            else if (!reader.ValueSpan.IsEmpty)
                            {
                                payload = new byte[reader.ValueSpan.Length];
                                reader.ValueSpan.CopyTo(payload.Span);
                            }
                            else
                            {
                                payload = null;
                            }
                        }
                        else
                        {
                            reader.CheckRead();
                            reader.Skip();
                        }

                        break;
                    case JsonTokenType.EndObject:
                        completed = true;
                        break;
                }
            } while (!completed && reader.CheckRead());

            consumed = rawPayload.End;
            examined = consumed;

            message = GetSixtyNineMessageFromType(payloadType, source, destination, payload);
            return message != null;
        }

        /// <summary>Gets the type of the sixty nine message from.</summary>
        /// <param name="payloadType">Type of the payload.</param>
        /// <param name="source">The source.</param>
        /// <param name="destination">The destination.</param>
        /// <param name="payload">The payload.</param>
        /// <returns>SixtyNineMessage.</returns>
        /// <autogeneratedoc />
        private static SixtyNineMessage GetSixtyNineMessageFromType(string payloadType, string source,
            string destination, Memory<byte>? payload)
        {
            return payloadType switch
            {
                "INIT" => new InitMessage(source),
                "MESSAGE" => new PayloadMessage(source, destination, payload),
                "ERROR" => new ErrorMessage(destination, payload, source),
                "CLOSE" => new CloseMessage(),
                _ => throw new InvalidDataException(
                    $"Expected '{SixtyNineWriter.PayloadPropertyName}' to be of type {JsonTokenType.String}.")
            };
        }
    }
}