
using System;
using System.Collections.Concurrent;
using Microsoft.AspNetCore.Connections;

namespace TheDesolatedTunnels.RelayServer.Core.Services
{
    /// <summary>
    ///     Class ConnectionStore.
    /// </summary>
    /// <autogeneratedoc />
    public class ConnectionStore
    {
        /// <summary>
        ///     The connections
        /// </summary>
        /// <autogeneratedoc />
        private readonly ConcurrentDictionary<string, ConnectionContext> _connections = new(StringComparer.Ordinal);

        /// <summary>
        ///     Gets the <see cref="Microsoft.AspNetCore.Connections.ConnectionContext?" /> with the specified connection
        ///     identifier.
        /// </summary>
        /// <param name="connectionId">The connection identifier.</param>
        /// <returns>Microsoft.AspNetCore.Connections.ConnectionContext?.</returns>
        /// <autogeneratedoc />
        public virtual ConnectionContext? this[string connectionId]
        {
            get
            {
                _connections.TryGetValue(connectionId, out var connection);
                return connection;
            }
        }

        /// <summary>
        ///     Determines whether this instance contains the object.
        /// </summary>
        /// <param name="connectionId">The connection identifier.</param>
        /// <returns>bool.</returns>
        /// <autogeneratedoc />
        public virtual bool Contains(string connectionId)
        {
            return _connections.ContainsKey(connectionId);
        }

        /// <summary>
        ///     Counts this instance.
        /// </summary>
        /// <returns>int.</returns>
        /// <autogeneratedoc />
        public int Count()
        {
            return _connections.Count;
        }

        /// <summary>
        ///     Adds the specified connection.
        /// </summary>
        /// <param name="connection">The connection.</param>
        /// <autogeneratedoc />
        public virtual void Add(ConnectionContext connection)
        {
            _connections.TryAdd(connection.ConnectionId, connection);
        }

        /// <summary>
        ///     Removes the specified connection.
        /// </summary>
        /// <param name="connection">The connection.</param>
        /// <autogeneratedoc />
        public virtual void Remove(ConnectionContext connection)
        {
            _connections.TryRemove(connection.ConnectionId, out _);
        }

    }
}